---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  namespace: "istio-test"
  name: vs2
spec:
  exportTo:
    - "."
  hosts:
  - "service-deployment2"
  gateways:
  - mesh
  http:
    - name: "deployment2-v1"
      match:
        - sourceLabels:
            app: deployment1
          queryParams:
            version: 
              exact: "v1"
      route:
        - destination:
            host: service-deployment2
            subset: v1
            port:
              number: 80
    - name: "deployment2-v2"
      match:
        - sourceLabels:
            app: deployment1
          queryParams:
            version: 
              exact: "v2"
      route:
        - destination:
            host: service-deployment2
            subset: v2
            port:
              number: 80
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  namespace: istio-test
  name: dr-deployment2
spec:
  host: service-deployment2
  subsets:
    - name: "v1"
      labels:
        version: "v1"
    - name: "v2"
      labels:
        version: "v2"

---
apiVersion: v1
kind: Service
metadata:
  name: service-deployment2
  namespace: istio-test
spec:
  selector:
    app: deployment2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment2-v1
  namespace: istio-test
  labels:
    app: deployment2
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment2
      version: v1
  template:
    metadata:
      labels:
        app: deployment2
        version: v1
    spec:
      containers:
        - name: nginx
          image: nginx:1.23.2
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              name: nginx-conf2
      volumes:
        - name: nginx-conf2
          configMap:
            name: nginx-conf2
            items:
              - key: nginx.conf
                path: nginx.conf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment2-v2
  namespace: istio-test
  labels:
    app: deployment2
    version: v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment2
      version: v2
  template:
    metadata:
      labels:
        app: deployment2
        version: v2
    spec:
      containers:
        - name: nginx
          image: nginx:1.23.2
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              name: nginx-conf2-v2
      volumes:
        - name: nginx-conf2-v2
          configMap:
            name: nginx-conf2-v2
            items:
              - key: nginx.conf
                path: nginx.conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: istio-test
  name: nginx-conf2
data:
  nginx.conf: |
    worker_processes 2;
    pid /var/run/nginx.pid ;
    events {
        worker_connections 1024;
    }
    http {

      # Accept Large Urls
      large_client_header_buffers 16 128k;
      client_header_buffer_size 128;

      upstream deployment2 {
        server service-deployment2:80 fail_timeout=0;
      }
      server {
            listen 80;

            server_name istio-test;
            keepalive_timeout 5;

            access_log /dev/stdout;
            error_log /dev/stdout;

            location / {
              add_header Content-Type text/plain;
              return 200 'deployment2-v1';
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: istio-test
  name: nginx-conf2-v2
data:
  nginx.conf: |
    worker_processes 2;
    pid /var/run/nginx.pid ;
    events {
        worker_connections 1024;
    }
    http {

      # Accept Large Urls
      large_client_header_buffers 16 128k;
      client_header_buffer_size 128;

      upstream deployment2 {
        server service-deployment2:80 fail_timeout=0;
      }
      server {
            listen 80;

            server_name istio-test;
            keepalive_timeout 5;

            access_log /dev/stdout;
            error_log /dev/stdout;

            location / {
              add_header Content-Type text/plain;
              return 200 'deployment2-v2';
            }
        }
    }